services:

  # Database, postgres for example
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    # To be sure to run migrations only when postgres is ready to receive connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    restart: no
    # To be sure to run migrations only when postgres is ready to receive connections
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=postgres port=5432 user=postgres password=postgres dbname=test
      - GOOSE_VERBOSE=true
      # Provide the `GOOSE_COMMAND` variable to change the goose command to execute:
      #- GOOSE_COMMAND=up-to
      #- GOOSE_COMMAND_ARG=20230607203836
      # Or a placeholders to set it dynamically from the environment:
      #- GOOSE_COMMAND=${GOOSE_COMMAND}
      #- GOOSE_COMMAND_ARG=${GOOSE_COMMAND_ARG}
    volumes:
      - ./migrations:/migrations

  # Add the service, which depends on migration data,
  # with a `service_completed_successfully` condition to be sure data is successfully migrated.
  #
  # my_app:
  #  depends_on:
  #    migrations:
  #      condition: service_completed_successfully
